
      type Cliente{
          id:ID
          nombre:String
          apellido:String
          domicilio:String
          rfc:String
          emails:[Email]
          tipo:TipoCliente
      } 
      type Producto{
          id:ID
          nombre:String
          precio:Float!
          stock:Int!
      }    
      type Email{
          email:String
      }
      type Pedido{
          id:ID
          pedido:[PedidoProducto]
          total:Float
          fecha:String
          cliente:ID
          estado:EstadoPedido
      }
      type PedidoProducto{
          id:ID
          cantidad:Int

      }
      input emailInput{
          email:String
      }
      type Query{
          getCliente(id:ID): Cliente
          obtenerProducto(id:ID):Producto
          obtenerPedidos(cliente:String):[Pedido]
          getClientes(limite:Int,offset:Int):[Cliente]
          obtenerProductos(limite:Int,offset:Int):[Producto]
          totalClientes:String
          totalProductos:String

        
      }
      input PedidoInput{
          id:ID
          pedido:[PedidoProductoInput]
          total:Float
          fecha:String
          cliente:ID
          estado:EstadoPedido
      }
      input PedidoProductoInput{
          id:ID
          cantidad:Int

      }
      enum TipoCliente{
          BASICO
          PREMIUM
      }
      enum EstadoPedido{
          PENDIENTE
          CANCELADO
          COMPLETADO
      }
      input ClienteInput{
        id:ID
        nombre:String!
        apellido:String!
        domicilio:String
        rfc:String
        emails:[emailInput]
        tipo:TipoCliente
        pedidos:[PedidoInput]

      }  
        input ProductoInput{
        id:ID
        nombre:String!
        precio:Float!
        stock:Int!

      } 
      type Mutation {
          crearCliente(input:ClienteInput): Cliente
          actualizarCliente(input:ClienteInput): Cliente
          eliminarCliente(id:ID!): String

          """ crear productos aqu√≠"""
          nuevoProducto(input:ProductoInput): Producto
          actualizarProducto(input:ProductoInput):Producto
          eliminarProducto(id:ID):String

          #new order
          nuevoPedido(input:PedidoInput):Pedido

      }

